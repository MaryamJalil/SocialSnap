#!/usr/bin/env node

/**
 * Module dependencies.
 */
const mongoose = require('mongoose');
const ObjectId = mongoose.Types.ObjectId;
var app = require('../src/app');
var debug = require('debug')('tradesk-app:server');
var http = require('http');
const minisModel = require('../src/models/minis.model');
const minisStatisticsModel = require('../src/models//minis_statistics.model');
const _ = require('lodash');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var socket = require('socket.io');
const { check_like } = require('../src/services/app_policy/IsLike');
const { isObjectIdOrHexString } = require('mongoose');
const usersModel = require('../src/models/users.model');
const minis_like_dislikeModel = require('../src/models/minis_like_dislike.model');

const io = socket(server, {
  cors: {
    origin: ['http://localhost:3000', 'https://apis.shareslate.fun/'],
    methods: ['GET', 'POST'],
  },
});

io.on('connection', function (socket) {
  console.log(`${socket.id} is connected`);
  socket.on('mini', async (message) => {
    let get_mini = await minisModel
      .findById(ObjectId(message.mini_id))
      .where({ deleted: 'false' })
      .populate('created_by');
    const user = await usersModel.findById(message.user_id);
    if (get_mini) {
      get_mini.is_saved = user.saved_mini_ids.includes(
        message.mini_id
      )
        ? true
        : false;
      get_mini.is_like = user.liked_mini_ids.includes(message.mini_id)
        ? true
        : false;
      if (message.user_id !== get_mini.created_by._id) {
        const is_i_follow = get_mini.created_by.followers.findIndex(
          (id) => id == message.user_id
        );
        if (is_i_follow > -1) {
          get_mini.created_by.is_followed = true;
        } else {
          get_mini.created_by.is_followed = false;
        }
      }
      // const following = user.following;

      // following.length > 0 && following.includes(message.user_id)
      //   ? (following.is_followed = true)
      //   : (following.is_followed = false);
      //   await get_mini.save();
    }
    socket.emit('mini', get_mini);
  });
  // Handle a request from the client to like or dislike a mini
  socket.on('mini_likes_dislikes', async (message) => {
    const mini = await minisModel
      .findById(message.mini_id)
      .where({ deleted: false })
      .populate('created_by')
      .lean();
    const user = await usersModel.findById(ObjectId(message.user_id));
const miniStatistics = await minisStatisticsModel.findOne({ mini: ObjectId(message.mini_id) });

console.log(miniStatistics,"miniStatistics");

    const is_like = await check_like(
      message.user_id,
      message.mini_id
    );
    if (is_like) {
      const like = await minis_like_dislikeModel
        .findOne({ mini: ObjectId(message.mini_id) })
        .where({ deleted: false });
      // Delete the like from the database
      await minis_like_dislikeModel.deleteOne({
        _id: ObjectId(like._id),
      });

      // Decrement the likes count for the mini
      mini.likes_count = Math.max(0, mini.likes_count - 1);
      mini.is_like = false;
      // Update the likes count in the database
      await minisModel.updateOne(
        { _id: ObjectId(message.mini_id) },
        { $set: { likes_count: mini.likes_count } }
      );
    } else {
      const likeData = {
        mini: ObjectId(message.mini_id),
        like: true,
        created_by: ObjectId(message.user_id),
      };
      await minis_like_dislikeModel.create(likeData);
      mini.likes_count = 1 + parseInt(mini.likes_count);
      await minisModel.findOneAndUpdate(
        { _id: ObjectId(message.mini_id) },
        { $set: { likes_count: mini.likes_count } }
      );
      mini.is_like = true;
      console.log(is_like,"is_like888")

      if (user && miniStatistics) {
        miniStatistics.female_likes = user.gender === 'female' ? 1 + parseInt(miniStatistics.female_likes) : miniStatistics.female_likes;
        miniStatistics.male_likes = user.gender === 'male' ? 1 + parseInt(miniStatistics.male_likes) : miniStatistics.male_likes;
        miniStatistics.others_likes = user.gender === 'others' ? 1 + parseInt(miniStatistics.others_likes) : miniStatistics.others_likes;
      
        await miniStatistics.save();
      }
    }
    if (!user.liked_mini_ids.includes(message.mini_id)) {
      await usersModel.updateMany(
        { _id: ObjectId(message.user_id) },
        { $push: { liked_mini_ids: message.mini_id } }
      );
    }
    if (user.liked_mini_ids.includes(message.mini_id)) {
      await usersModel.updateOne(
        { _id: ObjectId(message.user_id) },
        { $pull: { liked_mini_ids: message.mini_id } }
      );
    }
    socket.emit('mini_likes_dislikes', mini);
  });

  socket.on('profile', async (message) => {
    const other_user = await usersModel.findOne({
      _id: ObjectId(message.other_user_id),
      active: true,
      deleted: false,
    });
    const user = await usersModel.findOne({
      _id: ObjectId(message.user_id),
      active: true,
      deleted: false,
    });
    const following = other_user.following;

    following.length > 0 && following.includes(message.user_id)
      ? (following.is_followed = true)
      : (following.is_followed = false);

    socket.emit('profile', user);
  });

  socket.on('get_other_user_profile', async (message) => {
    const other_user = await usersModel.findOne({
      _id: ObjectId(message.other_user_id),
      active: true,
      deleted: false,
    });
    const follower = other_user.followers;
    other_user.is_followed = follower.includes(message.user_id)
      ? true
      : false;

    socket.emit('get_other_user_profile', other_user);
  });

  socket.on('get_profile_byId', async (message) => {
    try {
      const other_user = await usersModel.findOne({
        _id: ObjectId(message.other_user_id),
        active: true,
        deleted: false,
      });
      const user = await usersModel.findOne({
        _id: ObjectId(message.user_id),
        active: true,
        deleted: false,
      });
      const following = other_user.following;

      following.length > 0 && following.includes(message.user_id)
        ? (following.is_followed = true)
        : (following.is_followed = false);

      socket.emit('get_profile_byId', other_user);
    } catch (error) {
      console.error(error);
      socket.emit('error', 'An error occurred while retrieving the profile.');
    }
  });
  socket.on('disconnect', function () {
    console.log('user disconnected');
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */
console.log('port=', port);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind =
    typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind =
    typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
